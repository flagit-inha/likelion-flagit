"""
Django settings for flagit_server project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
import sys
import site

from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

GEMINI_API_KEY = config('GEMINI_API_KEY')
GEMINI_MODEL_NAME = config('GEMINI_MODEL_NAME')
    
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = ['13.124.202.94']


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    'location',
    'member',
    'crew',
    'notices',
    'stores',
    'coupons',
    'certifications',
    'routes',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',  # GIS 기능 활성화
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # 인증된 요청인지 확인
        #'rest_framework.permissions.AllowAny',  # 누구나 접근 가능 
				# (기본적으로 누구나 접근 가능하게 설정하고, 인증된 요청인지 확인하는 api를 따로 지정하게 하려면 
				# 이 옵션을 위의 옵션 대신 켜주어도 됩니다!)
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT를 통한 인증방식 사용
    ),
}

REST_USE_JWT = True

AUTH_USER_MODEL = 'member.User'

SIMPLE_JWT = {
    'SIGNING_KEY': 'hellolikelionhellolikelion', # JWT 서명에 사용될 비밀 키
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1), # Access Token 유효기간
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7), # Refresh Token 유효기간
    'ROTATE_REFRESH_TOKENS': False, # 토큰을 재발급할 때 기존 리프레시 토큰을 유지할지 여부 (현재는 기존 토큰 유지) 
    'BLACKLIST_AFTER_ROTATION': True # 토큰이 재발급되면 기존 토큰 블랙리스트에 추가하여 사용 불가 처리
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'flagit_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'flagit_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',  # PostGIS 사용
        'NAME': config('DB_NAME', default='flagit_db'),
        'USER': config('DB_USER', default='postgres'),
        'PASSWORD': config('DB_PASSWORD', default=''),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default='')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default='')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='')
AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='')

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Windows에서 GDAL/GEOS 동적 라이브러리 경로 설정 (선택적)
if os.name == 'nt':
    # .env에서 가상환경 이름을 받아서 경로 생성
    venv_name = config('VENV_NAME', default='venv')
    project_root = BASE_DIR.parent.parent  # .../FLAGIT
    osgeo_path = project_root / venv_name / 'Lib' / 'site-packages' / 'osgeo'
    
    # 또는 직접 OSGEO_PATH 지정
    osgeo_path_env = config('OSGEO_PATH', default='').strip()
    if osgeo_path_env:
        osgeo_path = Path(osgeo_path_env)

    if osgeo_path.exists():
        try:
            os.add_dll_directory(str(osgeo_path))
        except Exception:
            pass

        gdal_dll = osgeo_path / 'gdal.dll'
        geos_dll = osgeo_path / 'geos_c.dll'

        if gdal_dll.exists():
            GDAL_LIBRARY_PATH = str(gdal_dll)
        if geos_dll.exists():
            GEOS_LIBRARY_PATH = str(geos_dll)

